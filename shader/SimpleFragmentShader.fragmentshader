#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

// Ouput data
out vec4 color;

#define LightNumber 2
struct PointLight 
{    
    vec3 position;
	vec3 LightParam_Color;
	float LightParam_Power;
};  

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform PointLight pointLights[LightNumber];
vec3 CalculatePointLight(PointLight pt);

void main(){
	

	vec3 result = vec3(0.0);
	int i;
	for(i=0;i<2;i++)
	{
		result += CalculatePointLight(pointLights[i]); 
	}
	color = vec4(result, 1.0);
}

vec3 CalculatePointLight(PointLight pt)
{
	//vec3 test = vec3(0.0);
	// Light emission properties
	vec3 LightColor = pt.LightParam_Color;
	float LightPower = pt.LightParam_Power;
	
	// Material properties
	vec3 MaterialDiffuseColor = texture( myTextureSampler, UV ).rgb;
	vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);

	// Distance to the light
	float distance = length( pt.position - Position_worldspace );

	vec3 n = normalize( Normal_cameraspace );

	vec3 l = normalize( LightDirection_cameraspace );

	float cosTheta = clamp( dot( n,l ), 0,1 );
	
	// Eye vector (towards the camera)
	vec3 E = normalize(EyeDirection_cameraspace);
	// Direction in which the triangle reflects the light

	vec3 R = reflect(-l,n);

	float cosAlpha = clamp( dot( E,R ), 0,1 );
	
	vec3 test = 
		// Ambient : simulates indirect lighting
		MaterialAmbientColor +
		// Diffuse : "color" of the object
		MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance*distance) +
		// Specular : reflective highlight, like a mirror
		MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5) / (distance*distance);
	return test;
}